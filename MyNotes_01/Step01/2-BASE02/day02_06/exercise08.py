# author: Ziming Guo
# time: 2020/2/9
'''
三个练习的经验总结：
    存储多个学生信息(姓名,年龄,成绩,性别)的多种方式

    1. exercise05字典内嵌列表:
    {
        "张无忌":[28,100,"男"],
    }
    2. exercise06字典内嵌字典:
    {
        "张无忌":{"age":28,"score":100,"sex":"男"},
    }
    3. exercise07列表内嵌字典:
    [
        {"name":"张无忌","age":28,"score":100,"sex":"男"},
    ]
    4. 列表内嵌列表
    [
        ["张无忌",28,100,男],
    ]
'''
# 弄清楚选择策略：（ 两害相权取其轻 ）
#   字典：
#       优点：
#           1）读取速度快，根据键获取值，所以快;其他方式都是一个一个找，但是字典是分区来查找的
#           2）根据键获取比根据索引获取，可读性很高
#       缺点：
#           1）内存占用很多，费地方
#           2）获取值只能根据键，不灵活；而列表可以根据索引 & 切片（正向反向都可以 ）
#   列表：
#       优点：
#           1）获取元素灵活
#           2）占内存很小
#       缺点：
#           1）通过索引获取，如果信息很多，可读性不高
#  说一千道一万，只要是记住内存图，会话内存图，就会清楚认识到该用什么


# 练习：
#   在控制台中录入多个人的多个喜好
#   例如：请输入姓名：
#        请输入第一个喜好：
#        请输入第二个喜好：
#        当输入回车的时候停止获取，开始获取下一个的姓名 & 喜好
#        当输入的姓名是空字符串的时候，停止录入
#        最后在控制台打印所有人的 所有喜好
#        格式自定，啥都行
#   注：如果是两个循环嵌套，break只是退出一层

#   我的思路：大字典：键是name字符串，值是喜好组成的列表
dict01 = {}
while True:
    name = input("请输入第%d个人的姓名：" % (len(dict01) + 1))
    if name == "":
        break
    elif name != "":
        list_hobby = []
        while True:
            hobby = input("请输入他的第%d个喜好：" % (len(list_hobby) + 1))
            if hobby != "":
                list_hobby.append(hobby)
            elif hobby == "":
                break
        dict01[name] = list_hobby

count03 = 0
for k, v in dict01.items():
    count03 += 1
    print_name = k
    print("第%d个人叫做%s" % (count03, print_name))

    count04 = 0
    for item in v:
        count04 += 1
        print_hobby = item
        print("他的第%d个爱好是%s" % (count04, print_hobby))

# 很重要很重要的经验：
#   表示爱好或分数之类的附属列表，一定要在 while 循环里面建立
#   这样可以保证，每次开始循环的时候建立的是一个新的列表
#   不然最后打印的是最后一组附属列表的数据，之前的都被抹掉了